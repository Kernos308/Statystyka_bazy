DROP TABLE regions CASCADE CONSTRAINTS
DROP TABLE countries CASCADE CONSTRAINTS
DROP TABLE departments CASCADE CONSTRAINTS
DROP TABLE employees CASCADE CONSTRAINTS
DROP TABLE job_history CASCADE CONSTRAINTS
DROP TABLE jobs_1 CASCADE CONSTRAINTS
DROP TABLE locations CASCADE CONSTRAINTS

CREATE TABLE countries AS SELECT * FROM HR.countries
CREATE TABLE departments AS SELECT * FROM HR.departments
CREATE TABLE employees AS SELECT * FROM HR.employees
CREATE TABLE job_grades AS SELECT * FROM HR.job_grades
CREATE TABLE jobs AS SELECT * FROM HR.jobs
CREATE TABLE locations AS SELECT * FROM HR.locations
CREATE TABLE regions AS SELECT * FROM HR.regions
CREATE TABLE job_history AS SELECT * FROM HR.job_history

ALTER TABLE COUNTRIES
    ADD PRIMARY KEY(country_id);

ALTER TABLE departments
    ADD PRIMARY KEY(department_id);
    
ALTER TABLE employees
    ADD PRIMARY KEY(employee_id);
    
ALTER TABLE job_grades
    ADD PRIMARY KEY(grade);
    
ALTER TABLE job_history
    ADD CONSTRAINT pk_job_history PRIMARY KEY (employee_id,start_date);  

ALTER TABLE jobs
    ADD PRIMARY KEY(job_id);
    
ALTER TABLE locations
    ADD PRIMARY KEY(location_id);
    
ALTER TABLE regions
    ADD PRIMARY KEY(region_id);

ALTER TABLE countries
    ADD FOREIGN KEY (region_id) REFERENCES regions(region_id); 

ALTER TABLE job_history
    ADD FOREIGN KEY (employee_id) REFERENCES employees(employee_id); 

ALTER TABLE employees
    ADD FOREIGN KEY (department_id) REFERENCES departments(department_id); 

ALTER TABLE employees
    ADD FOREIGN KEY (manager_id) REFERENCES employees(employee_id); 

ALTER TABLE departments
    ADD FOREIGN KEY (manager_id) REFERENCES employees(employee_id); 

ALTER TABLE departments
    ADD FOREIGN KEY (location_id) REFERENCES locations(location_id); 

ALTER TABLE employees
    ADD FOREIGN KEY (job_id) REFERENCES jobs(job_id); 

ALTER TABLE job_history
    ADD FOREIGN KEY (job_id) REFERENCES jobs(job_id);

ALTER TABLE job_history
    ADD FOREIGN KEY (department_id) REFERENCES departments(department_id);

ALTER TABLE locations
    ADD FOREIGN KEY (country_id) REFERENCES countries(country_id);

SELECT CONCAT(last_name, salary) AS payment
    FROM employees
    WHERE department_id = 20 OR department_id = 50
    AND salary BETWEEN 2000 AND 7000
    ORDER BY last_name;


SELECT employee.hire_date, employee.last_name, &user_column
    FROM employees employee, employees manager
    WHERE employee.manager_id = manager.employee_id
    AND EXTRACT (YEAR FROM manager.hire_date) = 2005
    ORDER BY &user_column;
AND e2.first_name LIKE '%&asd%'

SELECT first_name || ' ' || last_name AS employee, salary, phone_number
    FROM employees
    WHERE last_name LIKE '__e%' AND first_name LIKE '%&asd%'
    ORDER BY employee DESC, salary ASC;

SELECT first_name, last_name, ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) as months,
    CASE
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) < 150 THEN salary*0.1
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date)) BETWEEN 150 AND 200 THEN salary*0.2
        WHEN ROUND(MONTHS_BETWEEN(CURRENT_DATE, hire_date))>200 THEN salary*0.3
    END AS allowance_amount
    FROM employees
    ORDER BY months

SELECT 
    SUM(e.salary) as salary_summ, ROUND(AVG(e.salary)) as salary_avg
    FROM employees e, departments d
    WHERE d.department_id = e.department_id AND e.salary>5000

SELECT e.last_name, e.department_id, d.department_name, e.job_id
    FROM employees e
    INNER JOIN departments d ON e.department_id = d.department_id
    INNER JOIN locations l ON d.location_id = l.location_id
    INNER JOIN jobs j ON e.job_id = j.job_id
    WHERE l.city LIKE 'Toronto'

SELECT e2.first_name, e2.last_name
    FROM employees e1, employees e2
    WHERE e1.first_name LIKE 'Jennifer' AND e1.department_id = e2.department_id
    AND e1.employee_id <> e2.employee_id


SELECT d.department_name
    FROM departments d
    LEFT OUTER JOIN employees e ON e.department_id = d.department_id
    GROUP BY d.department_name
    HAVING count(e.department_id) = 0

SELECT e.first_name, e.last_name, e.job_id, d.department_name, e.salary, g.grade
    FROM employees e, job_grades g, departments d
    WHERE e.department_id = d.department_id
    AND e.salary BETWEEN g.min_salary AND g.max_salary


SELECT first_name, last_name, salary
    FROM employees
    WHERE salary>(SELECT AVG(salary) from employees);

SELECT e2.employee_id, e2.first_name, e2.last_name
    FROM employees e1, employees e2
    WHERE e1.last_name LIKE '%u%' AND e1.department_id = e2.department_id
    GROUP BY e2.employee_id, e2.first_name, e2.last_name




