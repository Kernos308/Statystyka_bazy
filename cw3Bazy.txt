---ZAD1---

DECLARE 
    numer_max INT;
    new_department_name VARCHAR2(30) := 'EDUCATION';
BEGIN
    SELECT MAX(department_id) +10
    INTO numer_max
    FROM departments;
    INSERT INTO departments(department_id, department_name)
    VALUES(numer_max, new_department_name);
  END;

---ZAD2---

DECLARE 
    numer_max INT;
    new_department_name VARCHAR2(30) := 'EDUCATION';
BEGIN
    SELECT MAX(department_id) +10
    INTO numer_max
    FROM departments;
    INSERT INTO departments(department_id, department_name, location_id)
    VALUES(numer_max, new_department_name, 3000);
END;

---ZAD3---

BEGIN
    FOR v_loop IN 1..10 LOOP
        IF (v_loop = 4 OR v_loop = 6) THEN 
            CONTINUE;
        ELSE
            INSERT INTO nowa (nowa_id)
            VALUES (v_loop);
        END IF;
    END LOOP;
END;

---ZAD4---

DECLARE
    countries_rec countries%ROWTYPE;
BEGIN
    SELECT * INTO countries_rec
    FROM countries
    WHERE country_id = 'CA';
    
    DBMS_OUTPUT.put_line(countries_rec.country_name || ' ' || countries_rec.region_id);
END;

---ZAD5---

DECLARE
    TYPE DepartmentIndex IS TABLE OF departments.department_name%TYPE INDEX BY BINARY_INTEGER;
    v_departments DepartmentIndex;
BEGIN
    FOR i IN 1..10 LOOP
        v_departments(i * 10) := NULL;
        SELECT department_name INTO v_departments(i * 10)
        FROM departments
        WHERE department_id = i * 10;
    END LOOP;
    FOR i IN 1..10 LOOP
        DBMS_OUTPUT.PUT_LINE('Nr: ' || i * 10 || ', Name: ' || v_departments(i * 10));
    END LOOP;
END;

---ZAD6---

DECLARE
  v_department departments%ROWTYPE;
BEGIN
  FOR i IN 1..10 LOOP
    SELECT * INTO v_department
    FROM departments
    WHERE department_id = i * 10;
    DBMS_OUTPUT.NEW_LINE;
    DBMS_OUTPUT.PUT_LINE('Department ID ' || v_department.department_id);
    DBMS_OUTPUT.PUT_LINE('Name: ' || v_department.department_name);
    DBMS_OUTPUT.PUT_LINE('Manager ID: ' || v_department.manager_id);
    DBMS_OUTPUT.PUT_LINE('Location ID: ' || v_department.location_id);
    DBMS_OUTPUT.NEW_LINE;
  END LOOP;
END;

---ZAD7---

BEGIN
   FOR employee_rec IN (
        SELECT salary, last_name
        FROM employees
        WHERE department_id = 50)
   LOOP
        IF(employee_rec.salary > 3100) THEN
            DBMS_OUTPUT.put_line(
            employee_rec.last_name || ' ' || 'Nie dawac podwyzki');
        ELSE
            DBMS_OUTPUT.put_line(
            employee_rec.last_name || ' ' || 'Dac podwyzke');
        END IF;
   END LOOP;
END; 

---ZAD8---

DECLARE
    CURSOR c_employees (low_salary NUMBER, high_salary NUMBER, third_letter CHAR)
    IS
        SELECT salary, first_name, last_name FROM employees
        WHERE first_name LIKE '__'||LOWER(third_letter)||'%' AND
        salary BETWEEN low_salary AND high_salary;
BEGIN
    FOR employee
    IN c_employees(1000, 5000, 'A')
    LOOP
        DBMS_OUTPUT.put_line(employee.salary || ' ' || employee.first_name);
    END LOOP;
    
        FOR employee
    IN c_employees(5000, 20000, 'u')
    LOOP
        DBMS_OUTPUT.put_line(employee.salary || ' ' || employee.first_name);
    END LOOP;
END;


---ZAD9---
--A--

CREATE PROCEDURE jobs_insert(
  p_Job_id Jobs.Job_id%TYPE,
  p_Job_title Jobs.Job_title%TYPE
)
AS
BEGIN
  INSERT INTO Jobs (Job_id, Job_title)
  VALUES (p_Job_id, p_Job_title);
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Could not add row into Jobs' || SQLERRM);
END jobs_insert;
/
CALL jobs_insert('AD_IT', 'IT technician');


--B--

CREATE PROCEDURE jobs_update(
    p_JOB_id JOBS.job_id%TYPE,
    p_JOB_title JOBS.job_title%TYPE
)
AS
    jobs_update_exception EXCEPTION;
    PRAGMA EXCEPTION_INIT(jobs_update_exception, -20000);
BEGIN
    UPDATE JOBS SET job_title = p_JOB_title WHERE job_id = p_job_id;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE jobs_update_exception;
    END IF;
    COMMIT;
EXCEPTION
    WHEN jobs_update_exception THEN
        DBMS_OUTPUT.PUT_LINE('Could not update Jobs.');
END jobs_update;
/
CALL jobs_update('AD_IT','IT Technician');
CALL jobs_update('ABCDCAC','IT Technician');

--C--

CREATE PROCEDURE jobs_delete(
    p_job_id JOBS.job_id%TYPE
)
AS
    no_jobs_deleted EXCEPTION;
    PRAGMA EXCEPTION_INIT(no_jobs_deleted, -20001);
BEGIN
    DELETE FROM Jobs WHERE job_id = p_job_id;
    IF SQL%ROWCOUNT = 0 THEN
        RAISE no_jobs_deleted;
    END IF;
    COMMIT;
EXCEPTION
    WHEN no_jobs_deleted THEN
        DBMS_OUTPUT.PUT_LINE('Could not delete Jobs.');
END jobs_delete;
/
CALL jobs_delete('AD_IT');
CALL jobs_delete('AD_IT');

--D--

CREATE PROCEDURE pracownik_income(
    p_employee_id Employees.employee_id%TYPE,
    p_salary OUT employees.salary%TYPE,
    p_last_name OUT employees.last_name%TYPE
)
AS
BEGIN
    SELECT salary, last_name INTO p_salary, p_last_name FROM employees
    WHERE employees.employee_id = p_employee_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Could not find employee.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Could not SELECT from employees');
END pracownik_income;
/

DECLARE
  v_salary NUMBER;
  v_last_name VARCHAR2(50);
BEGIN
    pracownik_income(110, v_salary, v_last_name);
    IF v_salary IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE('Income ' || v_salary);
        DBMS_OUTPUT.PUT_LINE('Last name: ' || v_last_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Could not find: ' || v_last_name);
    END IF;
END;


--E--

CREATE OR REPLACE PROCEDURE employee_insert(
    p_first_name employees.first_name%TYPE,
    p_last_name employees.last_name%TYPE,
    p_salary employees.salary%TYPE DEFAULT 1000,
    p_email employees.email%TYPE DEFAULT 'example@mail.com',
    p_phone_number employees.phone_number%TYPE DEFAULT NULL,
    p_hire_date employees.hire_date%TYPE DEFAULT SYSDATE,
    p_job_id employees.job_id%TYPE DEFAULT 'IT_PROG',
    p_commission_pct employees.commission_pct%TYPE DEFAULT NULL,
    p_manager_id employees.manager_id%TYPE DEFAULT NULL,
    p_department_id employees.department_id%TYPE DEFAULT 60
)
AS
    salary_too_high EXCEPTION;
    PRAGMA EXCEPTION_INIT(salary_too_high, -20002);
    v_employee_id NUMBER;
BEGIN
    SELECT (MAX(employee_id)+1) INTO v_employee_id FROM employees;
    IF p_Salary > 20000 THEN
        RAISE salary_too_high;
    ELSE
        INSERT INTO employees
        VALUES (v_employee_id, p_first_name, p_last_name, p_email, p_phone_number,
        p_hire_date, p_job_id, p_salary, p_commission_pct, p_manager_id, p_department_id);
        COMMIT;
    END IF;
EXCEPTION
    WHEN salary_too_high THEN
        DBMS_OUTPUT.PUT_LINE('Income is too high.');
END employee_insert;
/
CALL employee_insert('Jan', 'Kowalski', 3000);
CALL employee_insert('Jacek', 'Nowak', 30000);























